#!/usr/bin/env ruby

#
# Copyright (c) 2017-2017, John Mettraux, jmettraux@gmail.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#
# Made in Japan
#

require 'json'
require 'optparse'


#
# opts wrangling

opts = { ts: 0.077, ws: 1.0, bc: true, si: false, out: $stdout }
  #
OptionParser.new do |op|

  op.banner = "Usage: kinocompact [options] [filename or -]"

  op.on(
    '-t SECONDS', '--type-speed SECONDS', Float,
    "Sets the type speed, defaults to #{opts[:ts]}"
  ) { |s| opts[:ts] = s.to_f }
  op.on(
    '-w SECONDS', '--wait-speed SECONDS', Float,
    "Sets the max wait speed, defaults to #{opts[:ws]}"
  ) { |s| opts[:ts] = s.to_f }

  op.on(
    '--stdin',
    "Reads incoming asciinema json file on stdin",
  ) { |s| opts[:si] = true }

  op.on(
    '-o FILENAME', '--out-file FILENAME',
    "Sets the output file, defaults to STDOUT"
  ) do |o|
    opts[:out] =
      case o
      when 'stdout' then $stdout
      when 'stderr' then $stderr
      else File.open(o, 'wb')
      end
  end

  op.on(
    '-B', '--no-backspace-compaction',
    "Disable backspace compaction",
  ) { |s| opts[:bc] = false }

  op.on('-h', '--help', "Print this help") { puts op; exit 0 }
end.parse!

j = JSON.parse(
  if ARGV.empty? || ARGV == [ '-' ] || opts[:si] == true
    STDIN.read
  else
    File.read(ARGV.first)
  end)


#
# retime asciinema stdout array

so = j
  .delete('stdout')
so = so
  .collect { |t, s|
    s.length == 1 ? [ opts[:ts], s ] : [ [ t, opts[:ws] ].min, s ] }

#
# backspace compaction

loop do
  i = so.index { |t, s| s == "\b\u001b[K" }
  break unless i
  so.delete_at(i)
  so.delete_at(i - 1)
end if opts[:bc]

#
# output resulting JSON

opts[:out].puts '{'
j.each { |k, v| opts[:out].puts "  #{k.inspect}: #{JSON.dump(v)}," }
opts[:out].puts '  "stdout": ['
so[0..-2].each { |o| opts[:out].puts "    #{JSON.dump(o)}," }
opts[:out].puts "    #{JSON.dump(so.last)}"
opts[:out].puts "  ]"
opts[:out].puts '}'

#
# close output file if necessary

opts[:out].close unless [ $stdin, $stdout ].include?(opts[:out])

